addStyle(wb, 1, style = s, rows = 2:6, cols = 2, gridExpand = TRUE)
s <- createStyle(numFmt = "0.00")
addStyle(wb, 1, style = s, rows = 2:6, cols = 3, gridExpand = TRUE)
s <- createStyle(numFmt = "0.000")
addStyle(wb, 1, style = s, rows = 2:6, cols = 4, gridExpand = TRUE)
s <- createStyle(numFmt = "#,##0")
addStyle(wb, 1, style = s, rows = 2:6, cols = 5, gridExpand = TRUE)
s <- createStyle(numFmt = "#,##0.00")
addStyle(wb, 1, style = s, rows = 2:6, cols = 6, gridExpand = TRUE)
s <- createStyle(numFmt = "$ #,##0.00")
addStyle(wb, 1, style = s, rows = 2:6, cols = 7, gridExpand = TRUE)
## set a default number format for numeric columns of data.frames
options(openxlsx.numFmt = "$* #,#0.00")
?writeData
wb
saveWorkbook(wb = wb,
file = "TRASH1.xlsx",
overwrite = TRUE)
## set a default number format for numeric columns of data.frames
options(openxlsx.numFmt = "$* #,#0.00")
writeData(wb, 1, x = data.frame(`Using Default Options` = rep(2345.1235, 5)), startCol = 9)
saveWorkbook(wb = wb,
file = "TRASH2.xlsx",
overwrite = TRUE)
options(openxlsx.numFmt = NULL)
wb <- createWorkbook()
addWorksheet(wb, "Sheet 1")
df <- data.frame(matrix(12.987654321, ncol = 7, nrow = 5))  ## data.frame to write
df[, 6:7] <- df[, 6:7] * 1e+06
df[1:2, 6:7] <- 13.987654321
## Set column 1 class to 'comma' to get comma separated thousands
class(df$X1) <- "comma"
writeData(wb, 1, df)
s <- createStyle(numFmt = "0.0")
addStyle(wb, 1, style = s, rows = 2:6, cols = 2, gridExpand = TRUE)
s <- createStyle(numFmt = "0.00")
addStyle(wb, 1, style = s, rows = 2:6, cols = 3, gridExpand = TRUE)
s <- createStyle(numFmt = "0.000")
addStyle(wb, 1, style = s, rows = 2:6, cols = 4, gridExpand = TRUE)
s <- createStyle(numFmt = "#,##0")
addStyle(wb, 1, style = s, rows = 2:6, cols = 5, gridExpand = TRUE)
s <- createStyle(numFmt = "#,##0.00")
addStyle(wb, 1, style = s, rows = 2:6, cols = 6, gridExpand = TRUE)
s <- createStyle(numFmt = "$ #,##0.00")
addStyle(wb, 1, style = s, rows = 2:6, cols = 7, gridExpand = TRUE)
saveWorkbook(wb = wb,
file = "TRASH1.xlsx",
overwrite = TRUE)
## set a default number format for numeric columns of data.frames
options(openxlsx.numFmt = "$* #,#0.00")
writeData(wb, 1, x = data.frame(`Using Default Options` = rep(2345.1235, 5)), startCol = 9)
saveWorkbook(wb = wb,
file = "TRASH2.xlsx",
overwrite = TRUE)
## set a default number format for numeric columns of data.frames
options(openxlsx.numFmt = "$* #,#0.00")
writeData(wb, 1, x = data.frame(`Using Default Options` = rep(2345.1235, 5)), startCol = 9)
saveWorkbook(wb = wb,
file = "TRASH2.xlsx",
overwrite = TRUE)
f.gg.proto(type = "scatter", y = `price`, x = `mat_quantity`)
f.gg.proto(type = "scatter", y = `price`, x = `mat_quantity`) +
scale_x_log10()
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10()
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = cat_main)
warnings
warnings()
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = cat_main) +
facet_wrap(~ cat_main)
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
facet_wrap(~ cat_main)
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = cat_main) +
facet_wrap(~ cat_main) +
theme(legend.position = "bottom")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = cat_main) +
facet_wrap(~ cat_main) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = cat_main) +
facet_wrap(~ cat_main) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = cat_sub1) +
facet_wrap(~ cat_sub1) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `price`) +
scale_x_log10() +
aes(color = cat_main) +
facet_wrap(~ cat_main) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `price`) +
scale_x_log10() +
aes(color = cat_sub1) +
facet_wrap(~ cat_sub1) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `mat_quantity`) +
scale_x_log10() +
aes(color = mat1_ei_lvl_1) +
facet_wrap(~ mat1_ei_lvl_1) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `price`) +
scale_x_log10() +
aes(color = `mat1_ei_lvl_1`) +
facet_wrap(~ `mat1_ei_lvl_1`) +
guides(color = "none")
f.gg.proto(type = "scatter", y = `gwp100a_tot`, x = `ubp_tot`) +
scale_x_log10()
setwd("~/Dropbox/Boot_R_Camp_@_HSLU/FilesFor_Ilias/Demo_Codes")
## Wide-format ##
d.sports <- read.table(file = "../DataSets/Sports_Results_En.txt")
d.sports
## let's create a dataset with further athletes info
d.athletes <- data.frame(athlete = d.sports$athlete,
age = c(23, 21, 21, 18, 32, 34, 25),
Gender = c("M", "M", "F", "M", "F", "F", "F"))
d.athletes
d.sports.long
## Moving to wide-format ##
d.sports.wide.again <- pivot_wider(d.sports.long,
names_from = "discipline",
values_from = "results")
## Moving to long-format ##
library(tidyr)
## Moving to wide-format ##
d.sports.wide.again <- pivot_wider(d.sports.long,
names_from = "discipline",
values_from = "results")
d.sports.long <- pivot_longer(d.sports,
cols = -athlete, ## variables that are not to put as results
## mind the minus here
names_to = "discipline", ## new column with name of sport
values_to = "results") ## new column with value (unquoted also works)
d.sports
d.sports.long
## joining the two datasets
d.sports.long.info <- left_join(x = d.sports.long,
y = d.athletes,
by = "athlete")
## joining the two datasets
d.sports.long.info <- left_join(x = d.sports.long,
y = d.athletes,
by = "athlete")
library(dplyr)
## joining the two datasets
d.sports.long.info <- left_join(x = d.sports.long,
y = d.athletes,
by = "athlete")
head(d.sports.long.info, n = 10)
## joining the two datasets
d.sports.long.info <- left_join(x = d.sports,
y = d.athletes,
by = "athlete")
head(d.sports.long.info, n = 10)
## joining the two datasets
d.sports.long.info <- left_join(d.sports.long,
d.athletes,
by = "athlete")
head(d.sports.long.info, n = 10)
## when names does not match in the two data sets
d.athletes.2 <- data.frame(sportsperson = d.sports$athlete,
age = c(23, 21, 21, 18, 32, 34, 25),
Gender = c("M", "M", "F", "M", "F", "F", "F"))
d.athletes.2
##
d.sports.long.info.2 <- left_join(d.sports.long,
d.athletes.2,
by = c("athlete" = "sportsperson"))
head(d.sports.long.info.2, n = 10)
## when names does not match in the two data sets
d.athletes.2 <- data.frame(sportsperson = d.sports$athlete,
age = c(23, 21, 21, 18, 32, 34, 25),
Gender = c("M", "M", "F", "M", "F", "F", "F"),
results = 1:7)
##
d.sports.long.info.2 <- left_join(d.sports.long,
d.athletes.2,
by = c("athlete" = "sportsperson"))
head(d.sports.long.info.2, n = 10)
##
d.sports.long.info.2 <- left_join(d.sports.long,
d.athletes.2,
by = c("athlete" = "sportsperson"),
suffix = c("", ".y"))
head(d.sports.long.info.2, n = 10)
merge(x = d.sports.long,
y = d.athletes)
merge(x = d.sports.long,
y = d.athletes,
by = "athlete")
d.athletes <- d.athletes[-1, ]
d.athletes
merge(x = d.sports.long,
y = d.athletes,
by = "athlete")
merge(x = d.sports.long,
y = d.athletes,
by = "athlete",
all = TRUE)
merge(x = d.sports.long,
y = d.athletes,
by = "athlete",
all.x = TRUE)
merge(x = d.sports.long,
y = d.athletes,
by = "athlete",
all.y = TRUE)
c("1" = "Bern", "3" = "Zurich", "2" = "Luzern")
x <- c("1" = "Bern", "3" = "Zurich", "2" = "Luzern")
x
x[sample(1:3, 10, replace = TRUE)]
str(x)
names(x)
names(x) <- NULL
x
str(x)
x <- c("1" = "Bern", "3" = "Zurich", "2" = "Luzern")
attr(x, "names")
attr(x, "names") <- NULL
str(iris)
attr(iris, "colnames")
attr(iris, "names")
attr(iris, "class")
## note that packages also contain methods functions
library(mgcv)
7+5
4*5
4*
6
4*
a.1 <- 10
a.2 <- 3 * a.1
a.2
a.2
#exercise 1
##1.1
a <- 2∗10+4/(3+1)
#exercise 1
##1.1
a <- 2*10+4/(3+1)
b <- 2*(37−33)
b <- 2*(37-33)
c <- sqrt(16)+(10+3)
#exercise 1
##1.1
a <- 2*10+4/(3+1)
d <- 2^4 + (1*3)/(2+5)
f <- 1/(2^3 − 8)
f <- 1/(2^3 - 8)
radius_r <- r^2
g <- 10^2*pi
f <- 1/(2^3-8)
cuberoot = function(x){
if(x < 0)
{ - (-x)^(1/3)}
else
{x^(1/3)}
}
cbr <- cuberoot(27)
e <- 3 + (cbr-8)
##1.2
results.a <- 2 * 10 + 4 / (3 + 1)
results.a * b / (c + results.a^2)
#exercises 2
##2.1
a.2.a <- c(2, 10, 13)
a.2.b <- 10:180:10
a.2.b <- 10:180
a.2.2.a <- seq(0, 10)
a.2.2.b <- seq(0, 10, 2)
##2.3
c(10,20,10) * c(0,1,2)
1:10 * 3
c(1,2,100) / c(1,4,0)
c(1,2,100) + c(1:6)
c(1,2,100) + c(1:7)
c("A", "B", "C") * 2
c("1", "2", "3") * 2
seq.1 <- c(1,2,3, 1,2,3, 1,2,3)
seq.1[1]
seq.1[9]
seq.1[4:7]
seq.1[4:6]
greater_2 <- seq.1 >1
greater_2
seq.1[greater_2]
## creating a numeric matrix
M.1 <- matrix(data = 6:1, nrow = 2, ncol = 3)
M.1
## same with rbind()
rbind(c(6, 4, 2), c(5, 3, 1))
## same with cbind()
cbind(1:2, 3:4, 5:6)
## very often r- and cbind() are used to add columns to an existing matrix
cbind(M.1, c(99, 102))
## logical and string matrices
matrix(data = c("a", "b", "c", "d", "e", "f"), nrow = 3) ## ncol not necessary here
matrix(data = c(TRUE, FALSE, FALSE, FALSE), ncol = 1)
## operations apply elementwise
M.aa <- matrix(data = 1:6, ncol = 3)
M.aa
M.bb <- matrix(data = c(10, 0, 10, 0, 100, 1), nrow = 2)
M.bb
## elementwise multiplication of two matrices
M.aa * M.bb
## negative indexes can also be used with matrices
M.aa
M.aa[-1, ]
M.aa[ , -c(2, 3)]
M.aa[-1 , -c(2, 3)] ## double dropping... is not often used (unclear)
## creating a data frame
v.participant.name <- c("Max", "Tony M?ller", "Andreas", "Ramona", "Nick Q.")
v.age <- c(17, 23, 45, 11, 44)
v.minor.YES <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
##
d.test <- data.frame(v.participant.name, v.age, v.minor = v.minor.YES)
d.test
## class of the single elements
class(v.participant.name)
class(v.age)
class(v.minor.YES)
class(d.test)
## accessing elements
d.test[1,2]
d.test[1, ]
d.test[ ,2]
d.test[ , -c(1,3)]
## Attributes: column names
colnames(d.test)
d.test[1:2, c("v.age", "v.minor")]
## excursus on column names
## colnames() can be used to retrieve column names
## OR set them
d.test.2 <- d.test
colnames(d.test.2) <- c("a", "b", "???")
d.test.2
## accessing columns via "$" symbol
d.test[, "v.age"]
d.test$v.age
## note partial matching
d.test$v.a
## but
d.test$v. ## does not work because not unambiguous
## adding elements to a data frames
d.test
d.test[ , "new.col"] <- 0
d.test
## same as
d.test$new.col.2 <- 0
d.test
## cbind or rbind
d.test3 <-
cbind(d.test,
gender = c("m", "m", "f",
"f", "f"))
## elements can be overwritten
d.test$new.col <- 10:14
# d.test[, "new.col"] <- 10:14
d.test
## operations with data frames
d.test$new.col <- d.test$new.col  + 150
d.test$new.col
## help pages
?mean
#exercises 3
##3.1
M.aa <- matrix(data = 1:10, ncol = 5)
M.aa
rbind(c(6, 4, 2), c(5, 3, 1))
rbind(c(1:5), c(6:10))
cbind(1:2, 3:4, 5:6)
cbind(1:2, 3:4, 5:6; 7:8; 9:10)
cbind(1:2, 3:4, 5:6, 7:8, 9:10)
#Exercise 4
##4.1
v.job <- c('Data Scientist', 'banker', 'artist', 'else', 'gardener')
v.salary <- c('$$', '$$$', '$?', 'unknown', '$')
v.satisfaction <- c('depends', 'money', 'high', 'unknown', 'medium')
v.field.exists.since <- c(15, 1000, Inf, NA, 500)
v.field.old <- c(FALSE, TRUE, TRUE, NA, TRUE)
d.test <- data.frame(v.job, v.salary, v.satisfaction, v.field.exists.since, v.field.old)
d.test
d.test[ , "v.field.old"] <- 0
d.test
d.test[ , "v.field.old_2"] <- 0
d.test
#Exercise 5
##5.1
rep(1, times = 5, length.out = 1)
#Exercise 5
##5.1
rep(1, times = 5, length.out = 5)
#Exercise 5
##5.1
rep(1, times = 5)
rep(321, times = 5)
rep(321, length.out = 5)
rep(3, 2, 1, length.out = 5)
rep(3, 2, 1, times = 5, length.out = 5)
rep(3, 2, 1, times = 5)
rep(3 2 1, times = 5)
rep(321, times = 5)
rnorm(n = 10, mean = 1:10)
plot(x = 1:10, y = 101:110, main = "First graph", type = "b")
plot(1:10, 101:110, main = "First graph", type = "b")
plot(1:10, 101:110, m = "First graph", ty = "b")
plot(main = "First graph", type = "b", x = 1:10, y = 101:110)
plot(x = 1:10, y = 101:110,
main = "First graph",
type = "b")
plot(1:10, 101:110, "b", main = "First graph")
plot(x = 1:10, y = 101:110, main = "First graph", type = "b1")
plot(1:10, 101:110, main = "First graph", type = "b2")
plot(x = 1:10, y = 101:110, main = "First graph", type = "b")
plot(1:10, 101:110, main = "First graph1", type = "b")
plot(1:10, 101:110, m = "First graph2", ty = "b")
plot(main = "First graph3", type = "b", x = 1:10, y = 101:110)
plot(x = 1:10, y = 101:110,
main = "First graph4",
type = "b")
plot(1:10, 101:110, "b", main = "First graph5")
rep(c(3,2,1), times = 5)
rep(c(3,2,1), times = 5, each = 3)
rep(c(3,2,1), times = 2, each = 3)
rep(c(3,2,1), each = 5)
rep(1:3, times = 4)
rep(c('A', 'Z', 'ZU'), times = 3)
rep(c('A', 'Z', 'ZU'), times = 2)
rnorm(n = 10, mean = 1)
rnorm(n = 10, mean = 1:10)
##4.2
t.num <- 1:10
t.alph <- LETTERS[1:10]
t.logical <- sample(x = c(TRUE, FALSE), size = 10, replace = TRUE
t.alph <- LETTERS[1:10]
t.logical <- sample(x = c(TRUE, FALSE), size = 10, replace = TRUE)
t.alph <- LETTERS[1:10]
d.2 <- data.frame(t.num = "Numbers", t.alph = "Alphabet", t.logical = "Log")
d.2 <- data.frame(t.num, t.alph, t.logical)
d.2$Numbers <- d.2$t.num
d.2$Letters <- d.2$t.alph
d.2$Log <- d.2$t.logical
d.2 <- data.frame(t.num, t.alph, t.logical, row.names = "Case")
##4.3
d.2[1,]
d.2$Log
install.packages("haven")
library(haven)
##7.2
d.framing <- read_dta('/Users/milicapajkic/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/Framingham.dat')
##7.2
d.framing <- read_dta("/Users/milicapajkic/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/Framingham.dat")
BlaueEier <- read.delim("~/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/BlaueEier.txt", comment.char="#")
View(BlaueEier)
##7.2
d.framing <- read_dta("/Users/milicapajkic/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/Framingham.dat")
##7.2
d.framing <- read.table("/Users/milicapajkic/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/Framingham.dat")
d.birthrates <- read.csv("/Users/milicapajkic/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/birthrates.csv")
View(d.birthrates)
d.birth_skip <- read.csv("/Users/milicapajkic/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/birthrates_WithDescription.csv", skip = 8)
View(d.birth_skip)
blaueEier_2 <- read.delim("~/Library/CloudStorage/OneDrive-HochschuleLuzern/HSLU/R_Bootcamp_Feb_2023/DataSets/BlaueEier.txt", comment.char="#", nrow = 10)
View(blaueEier_2)
##using vroom from tidyverse, fread in read.table, read_table in readr
d.cred <- read.table(url("https://stat.ethz.ch/Teaching/Datasets/competition.dat"))
setwd("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data")
df1 <- read.csv(DisasterDeclarationsSummaries.csv)
df1 <- read.csv(DisasterDeclarationsSummaries.csv)
df1 <- read.csv("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data/DisasterDeclarationsSummaries.csv")
df1 <- read.csv("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data/HousingAssistanceOwners.csv")
df1 <- read.csv("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data/DisasterDeclarationsSummaries.csv")
df2 <- read.csv("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data/HousingAssistanceOwners.csv")
library(dplyr)
full_join(df1, df2, by = "id")
merge_1 <- full_join(df1, df2, by = "id")
df1 <- read.csv("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data/DisasterDeclarationsSummaries.csv")
df2 <- read.csv("/Users/milicapajkic/Documents/GitHub/bootcamp_r/Data/HousingAssistanceOwners.csv")
merge_1 <- full_join(df1, df2, by = "id")
View(merge_1)
na.omit(merge_1)
View(merge_1)
na.omit(merge_1)
merge_2 <- complete.cases(merge_1)
df_merge3 <- na.omit(merge_1)
View(df_merge3)
unique(df1[c("designatedArea")])
areas_unique <- unique(df1[c("designatedArea")])
areas_unique <- unique(df1$designatedArea)
str(areas_unique)
install.packages("stringr")
library(stringr)
areas_only <- areas_unique %>% str_replace("(County)")
, ""
areas_only <- areas_unique %>% str_replace("(County)", "")
areas_only %>% str_replace("()", "")
areas_only %>% str_replace("()", "")
areas_only2 <- areas_only %>% str_replace("()", "")
areas_only <- areas_unique %>% str_replace("((County))", "")
View(df1)
areas_unique <- unique(df1$designatedArea)
